akka {
  loggers = ["akka.event.Logging$DefaultLogger"]
  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

  cluster {

    # !! IMPORTANT !!
    # the below are provided by root-application.conf on our cloud nodes, 
    # these values here serve only as local fallback
    seed-nodes = [
      "akka://cluster@127.0.0.1:2551",
      "akka://cluster@127.0.0.1:2552",
      "akka://cluster@127.0.0.1:2553"
    ]
    # !! IMPORTANT !!

    metrics.enabled = off
  }

  actor {
    provider = cluster


    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "com.lightbend.akka.bench.sharding.latency.LatencyBenchEntity$PingFirst" = kryo
      "com.lightbend.akka.bench.sharding.latency.LatencyBenchEntity$PingSecond" = kryo
      "com.lightbend.akka.bench.sharding.latency.LatencyBenchEntity$PongFirst" = kryo
      "com.lightbend.akka.bench.sharding.latency.LatencyBenchEntity$PongSecond" = kryo
      
      "com.lightbend.akka.bench.sharding.latency.LatencyBenchEntity$PersistAndPing" = kryo
      "com.lightbend.akka.bench.sharding.latency.LatencyBenchEntity$PersistPingSecond" = kryo
      "com.lightbend.akka.bench.sharding.latency.LatencyBenchEntity$RecoveredWithin" = kryo
      "com.lightbend.akka.bench.sharding.latency.LatencyBenchEntity$WarmupPing" = kryo

      // persisted events
      "com.lightbend.akka.bench.sharding.latency.LatencyBenchEntity$PingObserved" = kryo
      
      "com.lightbend.akka.bench.sharding.scalability.ActorCountingEntity$Start" = kryo
      "com.lightbend.akka.bench.sharding.scalability.ActorCountingEntity$Ready" = kryo
       
    }

    # kryo for serialization for lazy reasons
    kryo {
      type = "nograph"
      idstrategy = "explicit"
      buffer-size = 4096
      max-buffer-size = -1
      use-manifests = false
      use-unsafe = false
      post-serialization-transformations = "off"
      implicit-registration-logging = false
      kryo-trace = false

      mappings {
        // messages
        "com.lightbend.akka.bench.sharding.latency.LatencyBenchEntity$PingFirst" = 20
        "com.lightbend.akka.bench.sharding.latency.LatencyBenchEntity$PingSecond" = 21
        "com.lightbend.akka.bench.sharding.latency.LatencyBenchEntity$PersistAndPing" = 22
        "com.lightbend.akka.bench.sharding.latency.LatencyBenchEntity$PongFirst" = 23
        "com.lightbend.akka.bench.sharding.latency.LatencyBenchEntity$PongSecond" = 24
        "com.lightbend.akka.bench.sharding.latency.LatencyBenchEntity$PersistPingSecond" = 25
        "com.lightbend.akka.bench.sharding.latency.LatencyBenchEntity$RecoveredWithin" = 26
        
        // persisted events
        "com.lightbend.akka.bench.sharding.latency.LatencyBenchEntity$PingObserved" = 30
        "com.lightbend.akka.bench.sharding.latency.LatencyBenchEntity$WarmupPing" = 31
        
        // scalability bench
        "com.lightbend.akka.bench.sharding.scalability.ActorCountingEntity$Start" = 40
        "com.lightbend.akka.bench.sharding.scalability.ActorCountingEntity$Ready" = 41
      }


    }
  }

  remote {
    artery {
      enabled = on

      # !! IMPORTANT !!
      # the below are provided by root-application.conf on our cloud nodes, 
      # these values here serve only as local fallback
      canonical.hostname = "127.0.0.1"
      canonical.port = 0
      # !! IMPORTANT !!
    }
  }


  persistence {
    
    journal {
      plugin = "cassandra-journal"
      
      # auto start is important since otherwise we take a big hit on initializaiton delay
      auto-start-journals = ["cassandra-journal"]
    }
    snapshot-store {
      plugin = "cassandra-snapshot-store"

      # auto start is important since otherwise we take a big hit on initializaiton delay
      auto-start-snapshot-stores = ["cassandra-snapshot-store"]
    }
  }
}

cassandra-journal {
  contact-points = ["127.0.0.1"]
}

  
  
# benchmark config
shard-bench {
  
  mode = persist
  
  warmup-all = true
  
  unique-entities = 10000 // 10 k
  //  number-of-pings = 500000
  // for reference: local cassandra max throughput somewhere at 1000 writes/s on both my mbp and imac
  pings-per-second = 100 
  number-of-shards = 100
  minimum-nodes = 10
  
  # actor counting scalability -------------
  add-actors-batch = 2000
  add-actors-interval = 10.seconds
  # end of actor counting scalability ------
}


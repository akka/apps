akka {

  loggers = [
    "akka.event.slf4j.Slf4jLogger"
  ]

  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = cluster
    allow-java-serialization = no

    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "com.lightbend.multidc.ReplicatedCounter$Incremented" = kryo
      "com.lightbend.multidc.ReplicatedCounter$ShardingEnvelope" = kryo
      "com.lightbend.multidc.ReplicatedCounter$Increment" = kryo
      "com.lightbend.multidc.ReplicatedCounter$IncrementAck$" = kryo
      "com.lightbend.multidc.ReplicatedCounter$Get$" = kryo

      "com.lightbend.multidc.ReplicatedIntrospector$Inspect" = kryo
      "com.lightbend.multidc.ReplicatedIntrospector$Append" = kryo
      "com.lightbend.multidc.ReplicatedIntrospector$Stored" = kryo
      "com.lightbend.multidc.ReplicatedIntrospector$AppliedSelf" = kryo
      "com.lightbend.multidc.ReplicatedIntrospector$AppliedReplicated" = kryo
      "com.lightbend.multidc.ReplicatedIntrospector$AllState" = kryo

      "scala.collection.immutable.Nil$" = kryo
      "scala.collection.immutable.$colon$colon" = kryo
    }

    # kryo for serialization for lazy reasons
    kryo {
      type = "nograph"
      idstrategy = "explicit"
      buffer-size = 4096
      max-buffer-size = -1
      use-manifests = false
      use-unsafe = false
      post-serialization-transformations = "off"
      implicit-registration-logging = false
      kryo-trace = false

      mappings {
        "com.lightbend.multidc.ReplicatedCounter$Incremented" = 20
        "com.lightbend.multidc.ReplicatedCounter$ShardingEnvelope" = 21
        "com.lightbend.multidc.ReplicatedCounter$Increment" = 22
        "com.lightbend.multidc.ReplicatedCounter$IncrementAck$" = 23
        "com.lightbend.multidc.ReplicatedCounter$Get$" = 24

        "com.lightbend.multidc.ReplicatedIntrospector$Inspect" = 30
        "com.lightbend.multidc.ReplicatedIntrospector$Append" = 31
        "com.lightbend.multidc.ReplicatedIntrospector$Stored" = 32
        "com.lightbend.multidc.ReplicatedIntrospector$AppliedSelf" = 33
        "com.lightbend.multidc.ReplicatedIntrospector$AppliedReplicated" = 34
        "com.lightbend.multidc.ReplicatedIntrospector$AllState" = 35

        "scala.collection.immutable.Nil$" = 40
        "scala.collection.immutable.$colon$colon" = 41

      }
    }
  }

  remote {
    //    netty.tcp {
    //      # going across DCs so need the external IP in the cloud
    //      hostname = "127.0.0.1"
    //      port = 2552
    //    }

    artery {
      enabled = on
      canonical.hostname = "127.0.0.1"
      canonical.port = 2552
    }
  }

  cluster {
    roles = [
    ]

    seed-nodes = [
      "akka://MultiDcSystem@127.0.0.1:2552"
    ]

    multi-data-center {
      self-data-center = "eu-west"
    }

    http.management {
      hostname = "0.0.0.0"
      port = 19999
    }
  }

  persistence {
    snapshot-store.plugin = "cassandra-snapshot-store"

    multi-data-center {
      all-data-centers = ["eu-central", "eu-west"]

      speculative-replication.enabled = off

      cross-reading-replication {
        enabled = off
        local-notification = off

        cassandra-journal {
          eu-west {
            contact-points = ["eu-west-node1", "eu-west-node2"]
            keyspace = "akka_west"
            local-datacenter = "eu-west"
            data-center-replication-factors = ["eu-west:3"]
          }
          eu-central {
            contact-points = ["eu-central-node1", "eu-central-node2"]
            keyspace = "akka_central"
            local-datacenter = "eu-central"
            data-center-replication-factors = ["eu-central:3"]
          }
        }
      }

    }
  }

}

multidc {
  port = 8080
  host = "0.0.0.0"
}

cassandra-journal-multi-dc {
  contact-points = [
    "localhost"
  ]
  log-queries = on

  replication-strategy = "NetworkTopologyStrategy"
  data-center-replication-factors = ["eu-west:3", "eu-central:3"]

  #local-datacenter = "eu-west"
  #local-datacenter = "eu-central"

  # enable in west when cross-reading.enabled = on
  #keyspace = "akka_west"
  #data-center-replication-factors = ["eu-west:3"]

  # enable in central when cross-reading.enabled = on
  #keyspace = "akka_central"
  #data-center-replication-factors = ["eu-central:3"]

  enable-events-by-tag-query = off

  # Uncomment this when using cross-reading-replication.local-notification = on
  #notification {
  #  keyspace = "akka_notification"
  #  replication-strategy = "NetworkTopologyStrategy"
  #  data-center-replication-factors = ["eu-west:3", "eu-central:3"]
  #}
}

cassandra-query-journal-multi-dc {
  contact-points = [
    "localhost"
  ]
  #local-datacenter = "eu-west"
  #local-datacenter = "eu-central"
  log-queries = on
}

cassandra-snapshot-store {
  replication-strategy = "NetworkTopologyStrategy"
  data-center-replication-factors = ["eu-west:3", "eu-central:3"]
  #local-datacenter = "eu-west"
  #local-datacenter = "eu-central"
}


akka {

  actor {
    provider = cluster
    allow-java-serialization = no

    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "com.lightbend.multidc.ReplicatedCounter$Incremented" = kryo
      "com.lightbend.multidc.ReplicatedCounter$ShardingEnvelope" = kryo
      "com.lightbend.multidc.ReplicatedCounter$Increment" = kryo
      "com.lightbend.multidc.ReplicatedCounter$IncrementAck$" = kryo
      "com.lightbend.multidc.ReplicatedCounter$Get$" = kryo
    }

    # kryo for serialization for lazy reasons
    kryo  {
      type = "nograph"
      idstrategy = "explicit"
      buffer-size = 4096
      max-buffer-size = -1
      use-manifests = false
      use-unsafe = false
      post-serialization-transformations = "off"
      implicit-registration-logging = false
      kryo-trace = false

      mappings {
        "com.lightbend.multidc.ReplicatedCounter$Incremented" = 20
        "com.lightbend.multidc.ReplicatedCounter$ShardingEnvelope" = 21
        "com.lightbend.multidc.ReplicatedCounter$Increment" = 22
        "com.lightbend.multidc.ReplicatedCounter$IncrementAck$" = 23
        "com.lightbend.multidc.ReplicatedCounter$Get$" = 24
      }
    }
  }

  remote {
    netty.tcp {
      # going across DCs so need the external IP in the cloud
      hostname = "127.0.0.1"
      port = 2552
    }
  }

  cluster {
    roles = [
    ]

    seed-nodes = [
      "akka.tcp://MultiDcSystem@127.0.0.1:2552"
    ]

    multi-data-center.self-data-center = "eu-west"

    http.management {
      hostname = "0.0.0.0"
      port = 19999
    }
  }

  persistence {
    snapshot-store.plugin = "cassandra-snapshot-store"

    multi-data-center {
      all-data-centers = ["eu-central", "eu-west"]
    }
  }

}

multidc {
  port = 8080
  host = "localhost"
}

cassandra-journal-multi-dc {
  contact-points = [
    "localhost"
  ]
  log-queries = on
}

cassandra-query-journal-multi-dc {
  contact-points = [
    "localhost"
  ]
  log-queries = on
}


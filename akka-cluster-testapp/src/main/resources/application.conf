collecting-failure-detector = {
  implementation-class = "testapp.CollectorFailureDetector"

  sliding-window-size = 16

  heartbeat-interval = 1 s

  acceptable-heartbeat-pause = 10 s
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
}

akka.actor.default-dispatcher.fork-join-executor {
  parallelism-min = 16
  parallelism-max = 16
}

akka.cluster {
  auto-down = off
  roles = ["backend", "frontend"]

  #failure-detector.acceptable-heartbeat-pause = 0s
  #failure-detector = ${collecting-failure-detector}
  #failure-detector.tag = cluster
  
  metrics.enabled = off
}

akka.remote {
  log-remote-lifecycle-events = on
  log-frame-size-exceeding = 500b
  #transport-failure-detector = ${collecting-failure-detector}
  #transport-failure-detector.tag = remoting
  #watch-failure-detector = ${collecting-failure-detector}
  #watch-failure-detector.tag = remote-watch
}

akka.actor.deployment {

  /statsBackend/service/workerRouter {
    router = consistent-hashing
    nr-of-instances = 30
    cluster {
      enabled = on
      max-nr-of-instances-per-node = 2
      allow-local-routees = off
      use-role = backend
    }
  }

  /factorialFrontend/producer/factorialBackendRouter = {
    router = round-robin
    nr-of-instances = 1000
    cluster {
      enabled = on
      routees-path = "/user/factorialBackend"
      use-role = backend
      allow-local-routees = off
    }
  }

  /factorialBackend/workers = {
    router = round-robin
    nr-of-instances = 4
  }
}

akka.contrib.cluster.pub-sub {
  gossip-interval = 3s
}

stats.tick-interval = 10s

factorial {
  # enabling this will generate a lot of CPU and network load
  enabled = off
  batch-size=100
  n=4000
}

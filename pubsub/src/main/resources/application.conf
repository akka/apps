akka {
  extensions = [
    "com.romix.akka.serialization.kryo.KryoSerializationExtension$"
    "akka.cluster.pubsub.DistributedPubSub"
  ]

  diagnostics.checker.confirmed-typos = [
    "akka.actor.kryo"
  ]

  actor {
    provider = "cluster"

    allow-java-serialization = no

    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "com.lightbend.akka.bench.pubsub.Payload" = kryo
      "com.lightbend.akka.bench.pubsub.Publisher$Started" = kryo
      "com.lightbend.akka.bench.pubsub.Publisher$Tick$" = kryo
      "com.lightbend.akka.bench.pubsub.Publisher$Start" = kryo
      "com.lightbend.akka.bench.pubsub.Subscriber$Subscribed" = kryo
      "com.lightbend.akka.bench.pubsub.Subscriber$CollectStats$" = kryo
      "com.lightbend.akka.bench.pubsub.PubSubHost$StartSession" = kryo
      "com.lightbend.akka.bench.pubsub.PubSubHost$StopRun" = kryo
    }

    # kryo for serialization for lazy reasons
    kryo  {
      type = "nograph"
      idstrategy = "explicit"
      buffer-size = 4096
      max-buffer-size = -1
      use-manifests = false
      use-unsafe = false
      post-serialization-transformations = "off"
      implicit-registration-logging = false
      kryo-trace = false

      mappings {
        "com.lightbend.akka.bench.pubsub.Payload" = 21
        "com.lightbend.akka.bench.pubsub.Publisher$Started" = 22
        "com.lightbend.akka.bench.pubsub.Publisher$Start" = 23
        "com.lightbend.akka.bench.pubsub.Publisher$Tick$" = 24
        "com.lightbend.akka.bench.pubsub.Subscriber$Subscribed" = 25
        "com.lightbend.akka.bench.pubsub.Subscriber$CollectStats$" = 26
        "akka.actor.LocalActorRef" = 27
        "com.lightbend.akka.bench.pubsub.PubSubHost$StartSession" = 28
        "com.lightbend.akka.bench.pubsub.PubSubHost$StopRun" = 29
      }
    }
  }

  remote {
    artery {
      enabled = on

      # !! IMPORTANT !!
      # the below are provided by root-application.conf on our cloud nodes,
      # these values here serve only as local fallback
      canonical.hostname = "127.0.0.1"
      canonical.port = 2551
      canonical.port = ${?AKKA_CLUSTER_PORT}
      # !! IMPORTANT !!
    }
  }

  cluster {
    # !! IMPORTANT !!
    # the below are provided by root-application.conf on our cloud nodes,
    # these values here serve only as local fallback
    seed-nodes = [
      "akka://Benchmark@127.0.0.1:2551"
    ]
    roles = ["master"]
    # !! IMPORTANT !!

    downing-provider-class = "com.lightbend.akka.sbr.SplitBrainResolverProvider"
    split-brain-resolver.active-strategy = "keep-majority"
  }
}

bench.pubsub {
  http-api.host = "localhost"
  http-api.port = 8080
}
